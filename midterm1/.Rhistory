while(n < nrows(recipe) + 1){
if (recipe.metric[n, "unit"] == "cup" || recipe[n, "unit"] == "cups") {
recipe.metric[n, "amount"] = round(recipe[n, "amount"] * 236.6 * 2) / 2
reciple.metric[n, "unit"] = "ml"
}
if(recipe.metric[n, "unit"] == "oz") {
recipe.metric[n, "amount"] = round(recipe[n, "amount"] * 28.3 * 2) / 2
reciple.metric[n, "unit"] = "gr"
}
n + 1
}
return(recipe.metric)
}
test["amount"] = c(1:3)
test[amount] = c(1:3)
test= data.frame()
test["amount"]= c(1:5)
test= data.frame(a)
test
test["unit"]= c(rep("ml",5))
test
test[, 1] = c(1:5)
test
test["ingredient"]= c(rep("haha",5))
test
recipeConversion <- function(recipe){
if (colnames(recipe)[1] != "amount" || colnames(recipe)[2] != "unit" || colnames(recipe)[3] != "ingredient") {
print("Wrong column names")
stop
}
n= 1
recipe.metric = recipe
while(n < nrows(recipe) + 1){
if (recipe.metric[n, "unit"] == "cup" || recipe[n, "unit"] == "cups") {
recipe.metric[n, "amount"] = round(recipe[n, "amount"] * 236.6 * 2) / 2
reciple.metric[n, "unit"] = "ml"
}
if(recipe.metric[n, "unit"] == "oz") {
recipe.metric[n, "amount"] = round(recipe[n, "amount"] * 28.3 * 2) / 2
reciple.metric[n, "unit"] = "gr"
}
n + 1
}
return(recipe.metric)
}
recipeConversion(test)
recipeConversion <- function(recipe){
if (colnames(recipe)[1] != "amount" || colnames(recipe)[2] != "unit" || colnames(recipe)[3] != "ingredient") {
print("Wrong column names")
stop
}
n= 1
recipe.metric = recipe
while(n < nrow(recipe) + 1){
if (recipe.metric[n, "unit"] == "cup" || recipe[n, "unit"] == "cups") {
recipe.metric[n, "amount"] = round(recipe[n, "amount"] * 236.6 * 2) / 2
reciple.metric[n, "unit"] = "ml"
}
if(recipe.metric[n, "unit"] == "oz") {
recipe.metric[n, "amount"] = round(recipe[n, "amount"] * 28.3 * 2) / 2
reciple.metric[n, "unit"] = "gr"
}
n + 1
}
return(recipe.metric)
}
recipeConversion(test)
bml.init <- function(r, c, p){
m= matrix(nrow= r, ncol= c)
ones= round(r*c*p)
total= vector()
total= c(rep(0, r*c - ones), rep(1, ones/2), rep(2, ones/2))
for(i in 1:r) {
for(j in 1:c) {
m[i,j] = sample(C(0:2), 1, replace= TRUE, prob= c(1-p, p/2, p/2))
}
}
return(m)
}
test
bml.init(10,10,.4)
bml.init(10,10,.4)
bml.init <- function(r, c, p){
m= matrix(nrow= r, ncol= c)
ones= round(r*c*p)
total= vector()
total= c(rep(0, r*c - ones), rep(1, ones/2), rep(2, ones/2))
for(i in 1:r) {
for(j in 1:c) {
m[i,j] = sample(0:2, 1, replace= TRUE, prob= c(1-p, p/2, p/2))
}
}
return(m)
}
bml.init(10,10,.4)
test= bml.init(10,10,.7)
test
3/2
3%2
3%/2
3/%2
3%%2
?%%
?%
15%%10
bml.step <- function(m){
n = m
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
if (m[i,j]== 1) {
check1= m[(i+1 + nrow(m))/nrow(m),j]
if (check1== 0) {
m[(i+1 + nrow(n))/nrow(n),j] = 1
m[i,j] = 0
}
} else if (n[i,j]== 2) {
check2= m[i, (j-1 + ncol(n))/ncol(n)]
if (check2== 0) {
m[i, (j-1 + nrow(n))/nrow(n)] = 2
m[i,j] = 0
}
}
}
grid.new = m == n
return(list(m, grid.new))
}
test = matrix()
}
bml.step <- function(m){
n = m
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
if (m[i,j]== 1) {
check1= m[(i+1 + nrow(m))/nrow(m),j]
if (check1== 0) {
m[(i+1 + nrow(n))/nrow(n),j] = 1
m[i,j] = 0
}
} else if (n[i,j]== 2) {
check2= m[i, (j-1 + ncol(n))/ncol(n)]
if (check2== 0) {
m[i, (j-1 + nrow(n))/nrow(n)] = 2
m[i,j] = 0
}
}
}
}
grid.new = m == n
return(list(m, grid.new))
}
test = matrix(rep(0:2),nrow= 4, ncol= 4)
test
bml.step(test)
?boolean
grid.new= null
grid.new= NA
{
n = m
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
if (m[i,j]== 1) {
check1= m[i, (j+1 + ncol(n))%%ncol(n)]
if (check1== 0) {
m[i, (j+1 + ncol(n))%%ncol(n)] = 1
m[i,j] = 0
}
} else if (n[i,j]== 2) {
check2= m[(i-1 + nrow(m))%%nrow(m),j]
if (check2== 0) {
m[(i-1 + nrow(m))%%nrow(m),j] = 2
m[i,j] = 0
}
}
}
}
grid.new= NA
if(m == n) grid.new = FALSE
else if(m!=n) grid.new = TRUE
return(list(m, grid.new))
}
bml.step <- function(m){
n = m
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
if (m[i,j]== 1) {
check1= m[i, (j+1 + ncol(n))%%ncol(n)]
if (check1== 0) {
m[i, (j+1 + ncol(n))%%ncol(n)] = 1
m[i,j] = 0
}
} else if (n[i,j]== 2) {
check2= m[(i-1 + nrow(m))%%nrow(m),j]
if (check2== 0) {
m[(i-1 + nrow(m))%%nrow(m),j] = 2
m[i,j] = 0
}
}
}
}
grid.new= NA
if(m == n) grid.new = FALSE
else if(m!=n) grid.new = TRUE
return(list(m, grid.new))
}
test
bml.step(test)
bml.step <- function(m){
n = m
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
if (m[i,j]== "1") {
check1= m[i, (j+1 + ncol(n))%%ncol(n)]
if (check1== "0") {
m[i, (j+1 + ncol(n))%%ncol(n)] = "1"
m[i,j] = "0"
}
} else if (n[i,j]== "2") {
check2= m[(i-1 + nrow(m))%%nrow(m),j]
if (check2== "0") {
m[(i-1 + nrow(m))%%nrow(m),j] = "2"
m[i,j] = "0"
}
}
}
}
grid.new= NA
if(m == n) grid.new = FALSE
else if(m!=n) grid.new = TRUE
return(list(m, grid.new))
}
bml.step(test)
bml.step <- function(m){
n = m
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
if (m[i,j]== "1") {
check1= m[i, (j+1 + ncol(n))%%ncol(n)]
if (check1== "0") {
m[i, (j+1 + ncol(n))%%ncol(n)] = "1"
m[i,j] = "0"
}
} else if (n[i,j]== "2") {
check2= m[(i-1 + nrow(m))%%nrow(m), j]
if (check2== "0") {
m[(i-1 + nrow(m))%%nrow(m),j] = "2"
m[i,j] = "0"
}
}
}
}
grid.new= NA
if(m == n) grid.new = FALSE
else if(m!=n) grid.new = TRUE
return(list(m, grid.new))
}
bml.step(test)
bml.step <- function(m){
n = m
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
if (m[i,j]== "1") {
check1= m[i, (j+1 + ncol(n))%%ncol(n)]
if (check1== "0") {
m[i, (j+1 + ncol(n))%%ncol(n)] = "1"
m[i,j] = "0"
}
} else if (n[i,j]== "2") {
check2 = m[(i-1 + nrow(m))%%nrow(m), j]
if (check2 == "0") {
m[(i-1 + nrow(m))%%nrow(m),j] = "2"
m[i,j] = "0"
}
}
}
}
grid.new= NA
if(m == n) grid.new = FALSE
else if(m!=n) grid.new = TRUE
return(list(m, grid.new))
}
bml.step(test)
bml.step <- function(m){
n = m
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
if (m[i,j]== "1") {
check1= m[i, (j+1 + ncol(n))%%ncol(n)]
if (check1== "0") {
m[i, (j+1 + ncol(n))%%ncol(n)] = "1"
m[i,j] = "0"
}
} else if (n[i,j]== "2") {
check2 = m[(i-1 + nrow(m))%%nrow(m), j]
if (m[(i-1 + nrow(m))%%nrow(m), j] == "0") {
m[(i-1 + nrow(m))%%nrow(m),j] = "2"
m[i,j] = "0"
}
}
}
}
grid.new= NA
if(m == n) grid.new = FALSE
else if(m!=n) grid.new = TRUE
return(list(m, grid.new))
}
bml.step(test)
bml.step <- function(m){
n = m
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
if (m[i,j]== "1") {
check1= n[i, (j+1 + ncol(n))%%ncol(n)]
if (check1== "0") {
m[i, (j+1 + ncol(n))%%ncol(n)] = "1"
m[i,j] = "0"
}
} else if (m[i,j]== "2") {
check2 = m[(i-1 + nrow(m))%%nrow(m), j]
if (m[(i-1 + nrow(m))%%nrow(m), j] == "0") {
m[(i-1 + nrow(m))%%nrow(m),j] = "2"
m[i,j] = "0"
}
}
}
}
grid.new= NA
if(m == n) grid.new = FALSE
else if(m!=n) grid.new = TRUE
return(list(m, grid.new))
}
bml.step(test)
bml.step <- function(m){
n = m
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
if (m[i,j]== "1") {
check1= n[i, (j+1 + ncol(n))%%ncol(n)]
if (check1== "0") {
m[i, (j+1 + ncol(n))%%ncol(n)] = "1"
m[i,j] = "0"
}
} else if (m[i,j]== "2") {
check2 = m[(i-1 + nrow(m))%%nrow(m), j]
check2
if (m[(i-1 + nrow(m))%%nrow(m), j] == "0") {
m[(i-1 + nrow(m))%%nrow(m),j] = "2"
m[i,j] = "0"
}
}
}
}
grid.new= NA
if(m == n) grid.new = FALSE
else if(m!=n) grid.new = TRUE
return(list(m, grid.new))
}
bml.step(test)
test[2 - 1 + nrow(test))%%nrow(test), 2]
test[(2 - 1 + nrow(test))%%nrow(test), 2]
test
bml.step <- function(m){
n = m
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
if (m[i,j]== "1") {
check1= m[i, (j+1 + ncol(m))%%ncol(m)]
if (check1== "0") {
m[i, (j+1 + ncol(n))%%ncol(n)] = "1"
m[i,j] = "0"
}
} else if (m[i,j]== "2") {
check2 = m[(i-1 + nrow(m))%%nrow(m), j]
check2
if (m[(i-1 + nrow(m))%%nrow(m), j] == "0") {
m[(i-1 + nrow(m))%%nrow(m),j] = "2"
m[i,j] = "0"
}
}
}
}
grid.new= NA
if(m == n) grid.new = FALSE
else if(m!=n) grid.new = TRUE
return(list(m, grid.new))
}
bml.step(test)
bml.step <- function(m){
n = m
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
if (m[i,j]== "1") {
check1= m[i, (j+1 + ncol(m))%%ncol(m)]
if (check1== "0") {
m[i, (j+1 + ncol(m))%%ncol(m)] = "1"
m[i,j] = "0"
}
} else if (m[i,j]== "2") {
check2 = m[(i-1 + nrow(m))%%nrow(m), j]
check2
if (m[(i-1 + nrow(m))%%nrow(m), j] == "0") {
m[(i-1 + nrow(m))%%nrow(m),j] = "2"
m[i,j] = "0"
}
}
}
}
grid.new= NA
if(m == n) grid.new = FALSE
else if(m!=n) grid.new = TRUE
return(list(m, grid.new))
}
bml.step(test)
bml.step <- function(m){
n = m
numcol = ncol(m)
numrow = nrow(m)
for(i in 1:nrow(m)) {
for(j in 1:ncol(m)) {
if (m[i,j]== "1") {
check1= m[i, (j+1 + ncol(m))%%ncol(m)]
if (check1== "0") {
m[i, (j+1 + ncol(m))%%ncol(m)] = "1"
m[i,j] = "0"
}
} else if (m[i,j]== "2") {
check2 = m[(i-1 + nrow(m))%%nrow(m), j]
check2
if (m[(i- 1+ numrow)%%numrow, j] == "0") {
m[(i-1 + nrow(m))%%nrow(m),j] = "2"
m[i,j] = "0"
}
}
}
}
grid.new= NA
if(m == n) grid.new = FALSE
else if(m!=n) grid.new = TRUE
return(list(m, grid.new))
}
bml.step(test)
test = 1
test
test += 1
?gsub
setwd("C:/Users/Yi/src/stat133/midterm1")
load('SFHousing-2.rda')
View(housing)
mean.bsft <- mean(housing[3]== "Berkeley")
mean.bsft
mean.bsft <- mean(housing[housing$city == "Berkeley"])
mean.bsft <- mean(housing$city == "Berkeley")
mean.bsft
mean.bsft <- mean(housing[housing$city == "Berkeley"])
mean.bsft <- mean(housing[housing$city == "Berkeley",])
mean.bsft <- mean(housing[housing$city == "Berkeley", "bsqft"])
mean.bsft
mean.bsqft <- mean(housing$bsqft[housing$city == "Berkeley",])
mean.bsqft <- mean(housing$bsqft[housing$city == "Berkeley"])
mean.bsqft
housing$bsqft[housing$city == "Berkeley"]
mean.bsqft <- mean(housing$bsqft[housing$city == "Berkeley"])
mean.bsqft
?mean
mean.bsqft <- mean(housing$bsqft[housing$city == "Berkeley"], na.rm= TRUE)
mean.bsqft
med.bsqft <- median(housing$bsqft[housing$city == "Berkeley"], na.rm= TRUE)
med.bsqft
?sapply
bsqft.diffs <- sapply(housing$bsqft[housing$city == "Berkeley"], function(x)(x - med.bsqft)^2)
bsqft.diffs
bsqft.greater <- housing[housing$bsqft > mean.bsqft,]
bsqft.greater
bsqft.less <- housing[housing$bsqft <= mean.bsqft,]
bsqft.less
head(bsqft.less)
head(bsqft.greater)
?plot
plot(x = housing$price, y = housing$price, main = "Housing price vs Number of Rooms",
xlab= "number of rooms", ylab= "price")
?plot
?cex
?plot
plot(x = housing$price, y = housing$price, main = "Housing price vs Number of Rooms",
xlab= "number of rooms", ylab= "price", cex= 20)
yes= housing[housing$br >= min(room.range) & housing$br <= max(room.range),]
?plot
args(plot)
?plot.function
priceByRooms <- function(room.range, br, prices) {
yes= housing[housing$br >= min(room.range) & housing$br <= max(room.range),]
br= yes$br
#sapply(housing$br[housing$br >= min(room.range) & housing$br <= max(room.range), mean]
#mean(housing$price[]
return(mean(yes), br)
}
plot(x = housing$price, y = housing$price, main = "Housing price vs Number of Rooms",
xlab= "number of rooms", ylab= "price", type = "point", cex= 20)
plot(x = housing$price, y = housing$price, main = "Housing price vs Number of Rooms",
xlab= "number of rooms", ylab= "price", type = "20")
plot(x = housing$price, y = housing$price, main = "Housing price vs Number of Rooms",
xlab= "number of rooms", ylab= "price", type = "20")
plot(x = housing$price, y = housing$price, main = "Housing price vs Number of Rooms",
xlab= "number of rooms", ylab= "price", type = 20)
plot(x = housing$price, y = housing$price, main = "Housing price vs Number of Rooms",
xlab= "number of rooms", ylab= "price", type = "20"")
)
}
]
quit
90
stop
return(1)
